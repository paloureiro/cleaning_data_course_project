qplot
Preview
version()
version
versio
version
###Required package
library(igraph)
### Synthetic data set
set.seed(1)
n <- 7
n2 <- 100
mu <- cumsum(runif(n, min=-3, max=3))
sigma <- runif(n, min=1, max=3)
dat <- vector(mode="list", n)
for(i in seq(dat)){
dat[[i]] <- rnorm(n2, mean=mu[i], sd=sigma[i])
}
df <- data.frame(group=as.factor(rep(seq(n), each=n2)), y=unlist(dat))
### Plot
png("boxplot_levels_nolabels.png", width=6, height=4, units="in", res=400, type="cairo")
par(mar=c(4,4,1,1))
boxplot(y ~ group, df, notch=TRUE, outline=FALSE) # boxplot of factor level distributions
mtext("Levels", side=1, line=2.5)
mtext("y", side=2, line=2.5)
dev.off()
### Test for significant differences in factor level distributions
kruskal.test(y ~ group, df) # Significant differences as determined by Kruskal-Wallis rank sum test
pairwise.wilcox.test(df$y, df$g) # Pairwise Wilcoxon (or "Mann-Whitney") rank sum tests between all factor level combinations
### Labeling of factor level groupings
mw <- pairwise.wilcox.test(df$y, df$g)
# Create matrix showing factor levels that should be grouped
g <- as.matrix(mw$p.value > 0.05) # TRUE signifies that pairs of not significantly different at the p < 0.05 level
g <- cbind(rbind(NA, g), NA) # make square
g <- replace(g, is.na(g), FALSE) # replace NAs with FALSE
g <- g + t(g) # not necessary, but make matrix symmetric
diag(g) <- 1 # diagonal equals 1
rownames(g) <- 1:n # change row names
colnames(g) <- 1:n # change column names
g # resulting matrix
# Re-arrange data into an "edge list" for use in igraph (i.e. which groups are "connected") - Solution from "David Eisenstat" ()
same <- which(g==1)
g2 <- data.frame(N1=((same-1) %% n) + 1, N2=((same-1) %/% n) + 1)
g2 <- g2[order(g2[[1]]),] # Get rid of loops and ensure right naming of vertices
g3 <- simplify(graph.data.frame(g2,directed = FALSE))
get.data.frame(g3) # view connections
# Plot igraph
png("igraph_level_groupings.png", width=5, height=5, units="in", res=400, type="cairo")
par(mar=c(3,1,1,1))
V(g3)$color <- 8
V(g3)$label.color <- 1
V(g3)$size <- 20
plot(g3) # plot all nodes are connections
box()
mtext("Linked levels are not significantly different \n(Mann-Whitney)", side=1, line=1)
dev.off()
# Calcuate the maximal cliques - these are groupings where every node is connected to all others
cliq <- maximal.cliques(g3) # Solution from "majom" ()
# Reorder by level order - Solution from "MrFlick" ()
ml<-max(sapply(cliq, length))
reord <- do.call(order, data.frame(
do.call(rbind,
lapply(cliq, function(x) c(sort(x), rep.int(0, ml-length(x))))
)
))
cliq <- cliq[reord]
cliq
# Generate labels to  factor levels
lab.txt <- vector(mode="list", n) # empty list
lab <- letters[seq(cliq)] # clique labels
for(i in seq(cliq)){ # loop to concatenate clique labels
for(j in cliq[[i]]){
lab.txt[[j]] <- paste0(lab.txt[[j]], lab[i])
}
}
# Boxplot with facor level grouping labels
png("boxplot_levels_withlabels.png", width=6, height=4, units="in", res=400, type="cairo")
par(mar=c(4,4,1,1))
ylim <- range(df$y) + c(0,2)
bp <- boxplot(y ~ group, df, notch=TRUE, ylim=ylim, outline=FALSE) # boxplot of factor level distributions
text(x=1:n, y=bp$stats[4,], labels=lab.txt, col=1, cex=1, font=2, adj=c(-0.2, -0.2))
mtext("Levels", side=1, line=2.5)
mtext("y", side=2, line=2.5)
dev.off()
Title
========================================================
This is an R Markdown document. Markdown is a simple formatting syntax for authoring web pages (click the **Help** toolbar button for more details on using R Markdown).
When you click the **Knit HTML** button a web page will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r,echo=FALSE}
library(rmdexamples)
kmeans_cluster(iris)
```
install.packages("devtools")
install.packages("shiny")
When you click the **Knit HTML** button a web page will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
Title
========================================================
This is an R Markdown document. Markdown is a simple formatting syntax for authoring web pages (click the **Help** toolbar button for more details on using R Markdown).
When you click the **Knit HTML** button a web page will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r,echo=FALSE}
kmeans_cluster <- function(dataset) {
require(shiny)
shinyApp(
ui = fluidPage(responsive = FALSE,
fluidRow(style = "padding-bottom: 20px;",
column(4, selectInput('xcol', 'X Variable', names(dataset))),
column(4, selectInput('ycol', 'Y Variable', names(dataset),
selected=names(dataset)[[2]])),
column(4, numericInput('clusters', 'Cluster count', 3,
min = 1, max = 9))
),
fluidRow(
plotOutput('kmeans', height = "400px")
)
),
server = function(input, output, session) {
# Combine the selected variables into a new data frame
selectedData <- reactive({
dataset[, c(input$xcol, input$ycol)]
})
clusters <- reactive({
kmeans(selectedData(), input$clusters)
})
output$kmeans <- renderPlot(height = 400, {
par(mar = c(5.1, 4.1, 0, 1))
plot(selectedData(),
col = clusters()$cluster,
pch = 20, cex = 3)
points(clusters()$centers, pch = 4, cex = 4, lwd = 4)
})
},
options = list(height = 500)
)
}
kmeans_cluster(iris)
```
Title
========================================================
This is an R Markdown document. Markdown is a simple formatting syntax for authoring web pages (click the **Help** toolbar button for more details on using R Markdown).
When you click the **Knit HTML** button a web page will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r,echo=FALSE}
shinyApp(
ui = fluidPage(responsive = FALSE,
selectInput("region", "Region:", choices = colnames(WorldPhones)),
plotOutput("phonePlot")
),
server = function(input, output) {
output$phonePlot <- renderPlot({
barplot(WorldPhones[,input$region]*1000,
ylab = "Number of Telephones", xlab = "Year")
})
},
options = list(height = 500)
)
kmeans_cluster <- function(dataset) {
require(shiny)
shinyApp(
ui = fluidPage(responsive = FALSE,
fluidRow(style = "padding-bottom: 20px;",
column(4, selectInput('xcol', 'X Variable', names(dataset))),
column(4, selectInput('ycol', 'Y Variable', names(dataset),
selected=names(dataset)[[2]])),
column(4, numericInput('clusters', 'Cluster count', 3,
min = 1, max = 9))
),
fluidRow(
plotOutput('kmeans', height = "400px")
)
),
server = function(input, output, session) {
# Combine the selected variables into a new data frame
selectedData <- reactive({
dataset[, c(input$xcol, input$ycol)]
})
clusters <- reactive({
kmeans(selectedData(), input$clusters)
})
output$kmeans <- renderPlot(height = 400, {
par(mar = c(5.1, 4.1, 0, 1))
plot(selectedData(),
col = clusters()$cluster,
pch = 20, cex = 3)
points(clusters()$centers, pch = 4, cex = 4, lwd = 4)
})
},
options = list(height = 500)
)
}
kmeans_cluster(iris)
```
library("shiny", lib.loc="~/R/win-library/2.15")
detach("package:shiny", unload=TRUE)
library("shiny", lib.loc="~/R/win-library/2.15")
library("shiny", lib.loc="~/R/win-library/2.15")
library("shiny", lib.loc="~/R/win-library/2.15")
library(shiny)
numericInput("rows", "How many cars?", 5)
renderTable({
head(cars, input$rows)
numeric
})
library("shiny", lib.loc="~/R/win-library/2.15")
library("shiny", lib.loc="~/R/win-library/2.15")
shinyApp(
ui = fluidPage(
selectInput("region", "Region:",
choices = colnames(WorldPhones)),
plotOutput("phonePlot")
),
server = function(input, output) {
output$phonePlot <- renderPlot({
barplot(WorldPhones[,input$region]*1000,
ylab = "Number of Telephones", xlab = "Year")
})
},
options = list(height = 500)
)
install.packages("ggplot2")
install.packages("XML")
library(XML)
find.package("devtools")
install.packages("devtools")
library(devtools)
find_rtools()
require(devtools)
install_github("slidify","ramnathv")
install_github("slidifyLibraries","ramnathv")
install_github("rCharts","ramnathv")
install_github("shiny","rstudio")
author("interactive")
install.packages("kern")
install.packages("KernSmooth")
library("KernSmooth")
y <- 10
f <- function (x) {
y <- 2
y^2 + g(x)
}
g <- function(x) {
x*y
}
f(3)
ls(environment(f))
ls(environment(g))
get(x,environment(f))
get(y,environment(f))
get("y",environment(f))
get("y",environment(g))
ls(environment(g))
get("y",environment(g))
ls(environment(f))
z
f(3)
z <- 10
f(3)
y
z
rm (ls())
f <- function (x) {
g <- function(y){
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
install.packages("swirl")
library(swirl)
ls()
rm (list=ls())
swirl()
5+7
x <- 5 +7
x
y <- x-3
y
z <-c(1.1,9,3.14)
?c
z
c(z,555)
c(z,555,z)
z*2 + 100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10,100)
z*2 + 1000
my_div
swirl()
install.packages("RMySQL", type = "source")
library(RMySQL)
install.packages("RMySQL", type = "source")
R.home()
install.packages("RMySQL",type = "source")
R.home()
install.packages("RMySQL",type = "source")
install.packages("RMySQL",type = "source")
install.packages("RMySQL",type = "source")
install.packages("RMySQL",type = "source")
Sys.getenv("MYSQL_HOME")
Sys.getenv("MYSQL_HOME")
Sys.getenv("MYSQL_HOME")
install.packages("RMySQL",type = "source")
Sys.getenv("MYSQL_HOME")
R.home()
install.packages("RMySQL",type = "source")
R.home()
Sys.getenv("MYSQL_HOME")
install.packages("RMySQL",type = "source")
install.packages("httr")
library("httr")
oauth_endpoint("github")
oauth_endpoints("github")
myapp <- oauth_app("github","0d9006cc49df15be8a72","46d3ed3f58833aa983235ed62c6ce6658258cb8d")
github_token <- oauth2.0_token(oauth_endpoints("github"),myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos",gtoken)
stop_for_status(req)
content(req)
out <- content(req)
str(out)
head(out)
install.packages("jsonlite")
library("jsonlite")
jsoned <- fromJSON(out)
jsoned <- toJSON(out)
str(jsoned)
jsoned <- toJSON(jsoned)
jsoned <- fromJSON(jsoned)
View(jsoned)
?fromJSON
names(jsoned)
jsoned$created_at
jsoned$created_at[1]
jsoned$created_at[2]
jsoned$name
criterium <- jsoned$name == "datasharing"
jsoned$created_at[criterium]
install.packages("sqldf")
library(dplyr)
library(data.table)
setwd("C:/Users/pedro/projetos_R/uci_dataset")
train <- read.table("./train/X_train.txt")
test <- read.table("./test/X_test.txt")
merged_data <- tbl_df(rbind(train,test))
mystring <- "a-b-c()d)e-(f"
gsub("-","$",mystring,fixed=T)
sub("-","$",mystring,fixed=T)
gsub("-","$",mystring)
sub("-","_",mystring,fixed=T)
sub("_","-",mystring,fixed=T)
library(dplyr)
library(data.table)
setwd("C:/Users/pedro/projetos_R/uci_dataset")
train <- read.table("./train/X_train.txt")
test <- read.table("./test/X_test.txt")
merged_data <- tbl_df(rbind(train,test))
train_activity <- read.table("./train/y_train.txt")
test_activity <- read.table("./test/y_test.txt")
merged_activity_dt <- data.table(rbind(train_activity,test_activity))
setnames(merged_activity_dt,"V1","activities")
train_subjects <- read.table("./train/subject_train.txt")
test_subjects <- read.table("./test/subject_test.txt")
merged_subjects_dt <- data.table(rbind(train_subjects,test_subjects))
setnames(merged_subjects_dt,"V1","subjects")
features <- read.table("features.txt",colClasses=c("numeric","character"))
names(features) <- c("index","measurement")
col_names <- features$measurement
names(merged_data) <- col_names
filtered_data <- select(merged_data,matches("-mean()"),matches("-std()"),-matches("-meanFreq"))
untidy_names_filtered_data <- names(filtered_data)
untidy_names_filtered_data <- gsub("tBody","time_Body",untidy_names_filtered_data)
untidy_names_filtered_data <- gsub("tGravity","time_Gravity",untidy_names_filtered_data)
untidy_names_filtered_data <- gsub("fBody","freq_Body",untidy_names_filtered_data)
untidy_names_filtered_data <- gsub("\-mean()-\","\_mean_\",untidy_names_filtered_data)
untidy_names_filtered_data <- gsub("-","_",untidy_names_filtered_data,fixed=T)
untidy_names_filtered_data
untidy_names_filtered_data <- gsub("()","",untidy_names_filtered_data,fixed=T)
untidy_names_filtered_data
library(dplyr)
library(data.table)
setwd("C:/Users/pedro/projetos_R/uci_dataset")
train <- read.table("./train/X_train.txt")
test <- read.table("./test/X_test.txt")
merged_data <- tbl_df(rbind(train,test))
train_activity <- read.table("./train/y_train.txt")
test_activity <- read.table("./test/y_test.txt")
merged_activity_dt <- data.table(rbind(train_activity,test_activity))
setnames(merged_activity_dt,"V1","activities")
train_subjects <- read.table("./train/subject_train.txt")
test_subjects <- read.table("./test/subject_test.txt")
merged_subjects_dt <- data.table(rbind(train_subjects,test_subjects))
setnames(merged_subjects_dt,"V1","subjects")
features <- read.table("features.txt",colClasses=c("numeric","character"))
names(features) <- c("index","measurement")
col_names <- features$measurement
names(merged_data) <- col_names
filtered_data <- select(merged_data,matches("-mean()"),matches("-std()"),-matches("-meanFreq"))
untidy_names_filtered_data <- names(filtered_data)
untidy_names_filtered_data <- gsub("tBody","time_Body",untidy_names_filtered_data)
untidy_names_filtered_data <- gsub("tGravity","time_Gravity",untidy_names_filtered_data)
untidy_names_filtered_data <- gsub("fBody","freq_Body",untidy_names_filtered_data)
untidy_names_filtered_data <- gsub("-","_",untidy_names_filtered_data,fixed=T)
tidy_names_filtered_data <- gsub("()","",untidy_names_filtered_data,fixed=T)
tidy_names_filtered_data
colnames(filtered_data) <- as.character(tidy_names_filtered_data)
View(filtered_data)
untidy_names_filtered_data <- gsub("BodyBody","Body",untidy_names_filtered_data,fixed=T)
untidy_names_filtered_data
tidy_names_filtered_data <- gsub("()","",untidy_names_filtered_data,fixed=T)
filtered_data_dt <- data.table(filtered_data)
View(filtered_data_dt)
colnames(filtered_data) <- as.character(tidy_names_filtered_data)
View(filtered_data)
library(dplyr)
library(data.table)
setwd("C:/Users/pedro/projetos_R/uci_dataset")
train <- read.table("./train/X_train.txt")
test <- read.table("./test/X_test.txt")
merged_data <- tbl_df(rbind(train,test))
train_activity <- read.table("./train/y_train.txt")
test_activity <- read.table("./test/y_test.txt")
merged_activity_dt <- data.table(rbind(train_activity,test_activity))
setnames(merged_activity_dt,"V1","activities")
train_subjects <- read.table("./train/subject_train.txt")
test_subjects <- read.table("./test/subject_test.txt")
merged_subjects_dt <- data.table(rbind(train_subjects,test_subjects))
setnames(merged_subjects_dt,"V1","subjects")
features <- read.table("features.txt",colClasses=c("numeric","character"))
names(features) <- c("index","measurement")
col_names <- features$measurement
names(merged_data) <- col_names
filtered_data <- select(merged_data,matches("-mean()"),matches("-std()"),-matches("-meanFreq"))
untidy_names_filtered_data <- names(filtered_data)
untidy_names_filtered_data <- gsub("tBody","time_Body",untidy_names_filtered_data)
untidy_names_filtered_data <- gsub("tGravity","time_Gravity",untidy_names_filtered_data)
untidy_names_filtered_data <- gsub("fBody","freq_Body",untidy_names_filtered_data)
untidy_names_filtered_data <- gsub("-","_",untidy_names_filtered_data,fixed=T)
untidy_names_filtered_data <- gsub("BodyBody","Body",untidy_names_filtered_data,fixed=T)
tidy_names_filtered_data <- gsub("()","",untidy_names_filtered_data,fixed=T)
colnames(filtered_data) <- as.character(tidy_names_filtered_data)
filtered_data_dt <- data.table(filtered_data)
merged_activity_dt[,activities := as.character(activities)] [activities == "1", activities := "walking"]
merged_activity_dt[,activities := as.character(activities)] [activities == "2", activities := "walking_upstairs"]
merged_activity_dt[,activities := as.character(activities)] [activities == "3", activities := "walking_downstairs"]
merged_activity_dt[,activities := as.character(activities)] [activities == "4", activities := "sitting"]
merged_activity_dt[,activities := as.character(activities)] [activities == "5", activities := "standing"]
merged_activity_dt[,activities := as.character(activities)] [activities == "6", activities := "laying"]
tidy_data <- cbind(filtered_data_dt,merged_activity_dt,merged_subjects_dt)
tidy_data$activities <- as.factor(tidy_data$activities)
tidy_data$subjects <- as.factor(tidy_data$subjects)
tidy_data_grouped <- group_by(tidy_data,activities,subjects)
tidy_results <- summarise_each(tidy_data_grouped,funs(mean))
write.table(tidy_results,file="C:/Users/pedro/projetos_R/uci_dataset/tidy_results.txt",quote = F,row.names = F)
View(tidy_results)
library(dplyr)
library(data.table)
setwd("./uci_dataset")
train <- read.table("./train/X_train.txt")
library(dplyr)
library(data.table)
setwd("C:/Users/Pedro/Documents/GitHub/cleaning_data_course_project/uci_dataset")
train <- read.table("./train/X_train.txt")
getwd()
setwd("C:/Users/pedro/Documents/GitHub/cleaning_data_course_project/uci_dataset")
setwd("C:/Users/pedro/documents/gitHub/cleaning_data_course_project/uci_dataset")
setwd("C:/Users/Pedro/Documents/GitHub//cleaning_data_course_project/")
setwd("C:/Users/pedro/Documents/GitHub//cleaning_data_course_project/")
train <- read.table("./train/X_train.txt")
library(dplyr)
library(data.table)
setwd("C:/Users/pedro/Documents/GitHub//cleaning_data_course_project/")
train <- read.table("./train/X_train.txt")
test <- read.table("./test/X_test.txt")
merged_data <- tbl_df(rbind(train,test))
train_activity <- read.table("./train/y_train.txt")
test_activity <- read.table("./test/y_test.txt")
merged_activity_dt <- data.table(rbind(train_activity,test_activity))
setnames(merged_activity_dt,"V1","activities")
train_subjects <- read.table("./train/subject_train.txt")
test_subjects <- read.table("./test/subject_test.txt")
merged_subjects_dt <- data.table(rbind(train_subjects,test_subjects))
setnames(merged_subjects_dt,"V1","subjects")
features <- read.table("features.txt",colClasses=c("numeric","character"))
names(features) <- c("index","measurement")
col_names <- features$measurement
names(merged_data) <- col_names
filtered_data <- select(merged_data,matches("-mean()"),matches("-std()"),-matches("-meanFreq"))
untidy_names_filtered_data <- names(filtered_data)
untidy_names_filtered_data <- gsub("tBody","time_Body",untidy_names_filtered_data)
untidy_names_filtered_data <- gsub("tGravity","time_Gravity",untidy_names_filtered_data)
untidy_names_filtered_data <- gsub("fBody","freq_Body",untidy_names_filtered_data)
untidy_names_filtered_data <- gsub("-","_",untidy_names_filtered_data,fixed=T)
untidy_names_filtered_data <- gsub("BodyBody","Body",untidy_names_filtered_data,fixed=T)
tidy_names_filtered_data <- gsub("()","",untidy_names_filtered_data,fixed=T)
colnames(filtered_data) <- as.character(tidy_names_filtered_data)
filtered_data_dt <- data.table(filtered_data)
merged_activity_dt[,activities := as.character(activities)] [activities == "1", activities := "walking"]
merged_activity_dt[,activities := as.character(activities)] [activities == "2", activities := "walking_upstairs"]
merged_activity_dt[,activities := as.character(activities)] [activities == "3", activities := "walking_downstairs"]
merged_activity_dt[,activities := as.character(activities)] [activities == "4", activities := "sitting"]
merged_activity_dt[,activities := as.character(activities)] [activities == "5", activities := "standing"]
merged_activity_dt[,activities := as.character(activities)] [activities == "6", activities := "laying"]
tidy_data <- cbind(filtered_data_dt,merged_activity_dt,merged_subjects_dt)
tidy_data$activities <- as.factor(tidy_data$activities)
tidy_data$subjects <- as.factor(tidy_data$subjects)
tidy_data_grouped <- group_by(tidy_data,activities,subjects)
tidy_results <- summarise_each(tidy_data_grouped,funs(mean))
write.table(tidy_results,file="./tidy_results.txt",quote = F,row.names = F)
